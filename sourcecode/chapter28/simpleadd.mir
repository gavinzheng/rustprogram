// WARNING: This output format is intended for human consumers only
// and is subject to change without notice. Knock yourself out.
fn simple_add(_1: u32, _2: u32) -> u32 {
    debug x => _1;                       // in scope 0 at simpleadd.rs:1:15: 1:16
    debug y => _2;                       // in scope 0 at simpleadd.rs:1:23: 1:24
    let mut _0: u32;                     // return place in scope 0 at simpleadd.rs:1:34: 1:37
    let mut _3: (u32, bool);             // in scope 0 at simpleadd.rs:2:10: 2:15

    bb0: {
        _3 = CheckedAdd(_1, _2);         // scope 0 at simpleadd.rs:2:10: 2:15
        assert(!move (_3.1: bool), "attempt to compute `{} + {}`, which would overflow", _1, _2) -> bb1; // scope 0 at simpleadd.rs:2:10: 2:15
    }

    bb1: {
        _0 = move (_3.0: u32);           // scope 0 at simpleadd.rs:2:10: 2:15
        return;                          // scope 0 at simpleadd.rs:3:2: 3:2
    }
}

fn main() -> () {
    let mut _0: ();                      // return place in scope 0 at simpleadd.rs:4:11: 4:11
    let _1: u32;                         // in scope 0 at simpleadd.rs:5:7: 5:8
    let _2: ();                          // in scope 0 at /rustc/84c898d65adf2f39a5a98507f1fe0ce10a2b8dbc/library/std/src/macros.rs:137:9: 137:62
    let mut _3: std::fmt::Arguments<'_>; // in scope 0 at /rustc/84c898d65adf2f39a5a98507f1fe0ce10a2b8dbc/library/std/src/macros.rs:137:28: 137:61
    let mut _4: &[&str];                 // in scope 0 at simpleadd.rs:6:12: 6:16
    let mut _5: &[core::fmt::ArgumentV1<'_>]; // in scope 0 at /rustc/84c898d65adf2f39a5a98507f1fe0ce10a2b8dbc/library/std/src/macros.rs:137:28: 137:61
    let _6: &[core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/84c898d65adf2f39a5a98507f1fe0ce10a2b8dbc/library/std/src/macros.rs:137:28: 137:61
    let _7: [core::fmt::ArgumentV1<'_>; 1]; // in scope 0 at /rustc/84c898d65adf2f39a5a98507f1fe0ce10a2b8dbc/library/std/src/macros.rs:137:28: 137:61
    let mut _8: core::fmt::ArgumentV1<'_>; // in scope 0 at simpleadd.rs:6:18: 6:19
    let _9: &u32;                        // in scope 0 at simpleadd.rs:6:18: 6:19
    scope 1 {
        debug z => _1;                   // in scope 1 at simpleadd.rs:5:7: 5:8
        let mut _10: &[&str; 2];         // in scope 1 at simpleadd.rs:6:12: 6:16
    }

    bb0: {
        _1 = simple_add(const 3_u32, const 4_u32) -> bb1; // scope 0 at simpleadd.rs:5:11: 5:27
                                         // mir::Constant
                                         // + span: simpleadd.rs:5:11: 5:21
                                         // + literal: Const { ty: fn(u32, u32) -> u32 {simple_add}, val: Value(<ZST>) }
    }

    bb1: {
        _10 = const _;                   // scope 1 at simpleadd.rs:6:12: 6:16
                                         // mir::Constant
                                         // + span: simpleadd.rs:6:12: 6:16
                                         // + literal: Const { ty: &[&str; 2], val: Unevaluated(main, [], Some(promoted[0])) }
        _4 = _10 as &[&str] (Pointer(Unsize)); // scope 1 at simpleadd.rs:6:12: 6:16
        _9 = &_1;                        // scope 1 at simpleadd.rs:6:18: 6:19
        _8 = core::fmt::ArgumentV1::<'_>::new_display::<u32>(_9) -> bb2; // scope 1 at simpleadd.rs:6:18: 6:19
                                         // mir::Constant
                                         // + span: simpleadd.rs:6:18: 6:19
                                         // + user_ty: UserType(1)
                                         // + literal: Const { ty: for<'b> fn(&'b u32) -> core::fmt::ArgumentV1<'b> {core::fmt::ArgumentV1::<'_>::new_display::<u32>}, val: Value(<ZST>) }
    }

    bb2: {
        _7 = [move _8];                  // scope 1 at /rustc/84c898d65adf2f39a5a98507f1fe0ce10a2b8dbc/library/std/src/macros.rs:137:28: 137:61
        _6 = &_7;                        // scope 1 at /rustc/84c898d65adf2f39a5a98507f1fe0ce10a2b8dbc/library/std/src/macros.rs:137:28: 137:61
        _5 = _6 as &[core::fmt::ArgumentV1<'_>] (Pointer(Unsize)); // scope 1 at /rustc/84c898d65adf2f39a5a98507f1fe0ce10a2b8dbc/library/std/src/macros.rs:137:28: 137:61
        _3 = Arguments::<'_>::new_v1(move _4, move _5) -> bb3; // scope 1 at /rustc/84c898d65adf2f39a5a98507f1fe0ce10a2b8dbc/library/std/src/macros.rs:137:28: 137:61
                                         // mir::Constant
                                         // + span: /rustc/84c898d65adf2f39a5a98507f1fe0ce10a2b8dbc/library/std/src/macros.rs:137:28: 137:61
                                         // + user_ty: UserType(0)
                                         // + literal: Const { ty: fn(&[&'static str], &[core::fmt::ArgumentV1<'_>]) -> Arguments<'_> {Arguments::<'_>::new_v1}, val: Value(<ZST>) }
    }

    bb3: {
        _2 = _print(move _3) -> bb4;     // scope 1 at /rustc/84c898d65adf2f39a5a98507f1fe0ce10a2b8dbc/library/std/src/macros.rs:137:9: 137:62
                                         // mir::Constant
                                         // + span: /rustc/84c898d65adf2f39a5a98507f1fe0ce10a2b8dbc/library/std/src/macros.rs:137:9: 137:27
                                         // + literal: Const { ty: for<'a> fn(Arguments<'a>) {_print}, val: Value(<ZST>) }
    }

    bb4: {
        return;                          // scope 0 at simpleadd.rs:7:2: 7:2
    }
}

promoted[0] in main: &[&str; 2] = {
    let mut _0: &[&str; 2];              // return place in scope 0 at simpleadd.rs:6:12: 6:16
    let mut _1: [&str; 2];               // in scope 0 at simpleadd.rs:6:12: 6:16

    bb0: {
        _1 = [const "", const "\n"];     // scope 0 at simpleadd.rs:6:12: 6:16
                                         // mir::Constant
                                         // + span: simpleadd.rs:6:12: 6:16
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
                                         // mir::Constant
                                         // + span: simpleadd.rs:6:12: 6:16
                                         // + literal: Const { ty: &str, val: Value(Slice(..)) }
        _0 = &_1;                        // scope 0 at simpleadd.rs:6:12: 6:16
        return;                          // scope 0 at simpleadd.rs:6:12: 6:16
    }
}
